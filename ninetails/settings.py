"""
Generated by 'django-admin startproject' using Django 3.2.7.
"""
from pathlib import Path
from decouple import config
import os
from datetime import timedelta
import dj_database_url
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config('SECRET_KEY')


PRIVATE_KEY_PATH, PRIVATE_KEY = BASE_DIR/"keys/private.pem", False
PUBLIC_KEY_PATH, PUBLIC_KEY = BASE_DIR/"keys/public.pem", False
if PRIVATE_KEY_PATH.exists() and PUBLIC_KEY_PATH.exists():
    with open(PRIVATE_KEY_PATH, "r") as PRIVATE_KEY_FILE:
        PRIVATE_KEY = PRIVATE_KEY_FILE.read()
    with open(PUBLIC_KEY_PATH, "r") as PUBLIC_KEY_FILE:
        PUBLIC_KEY = PUBLIC_KEY_FILE.read()


DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*')

# TODO CHANGE THIS
DOMAIN = 'TEST'

# TODO CHANGE THIS
SITE_NAME = 'TEST'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'rest_framework',
    'corsheaders',
    'djoser',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
if not DEBUG:
    DATABASES['default'] = dj_database_url.parse(
    config('DATABASE_URL'),conn_max_age=600, ssl_require=True)


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


WSGI_APPLICATION = 'ninetails.wsgi.application'

ROOT_URLCONF = 'ninetails.urls'

AUTH_USER_MODEL = 'accounts.User'


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST = (
#   'http://localhost:8000',
#   'http://localhost:3000',
# )

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSON_CLASSES': (
        # 'rest_framework.permissions.R'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # added simple jwt authclass for jwt token
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}



DJOSER = {
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SERIALIZERS': {
        'current_user': 'accounts.serializers.BaseUserSerializer',
        'user': 'accounts.serializers.BaseUserSerializer',
    },
    "EMAIL": {
        'activation': 'accounts.emails.ConfirmationEmail',
    }
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = 'localhost'

EMAIL_PORT = '1025'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'UPDATE_LAST_LOGIN': True,
}

if PRIVATE_KEY and PUBLIC_KEY:
    SIMPLE_JWT.update(
        {
            'ALGORITHM': 'RS256',
            "SIGNING_KEY": PRIVATE_KEY,
            "VERIFYING_KEY": PUBLIC_KEY,
        }
    )
